/**
 * Controller module for BugReport model. All functions take in http request and response objects directly from the route. 
 * All modifying functions expect the request body to have the structure:  req.body.BugReport.  The fields present in the BugReport structure
 * should include the appropriate fields in the format generated by BugReport.getFields(). 
 */
import {BugReport} from '../model/BugReport.mjs';


export async function newRecord(req, res) {
    var record = BugReport.createRecord(data.creator, data.reportBody, data.platform, data.reportTransform);

    if(record) {
        res.status(201).send(record.getFields());
        return;
    }

    res.status(500).send();
};


/**
 * Find a record by guid.
 * @param {object} req
 * @param {object} res
 */
export async function getRecord(req, res) {
    var record = await BugReport.fetchRecord(req.body.BugReport.guid);
    
    if(record) {
         res.status(200).send(record.getFields());
         return;
    }

    res.status(404).send();
}

/**
 * Get all records created by the specified creator (user.username). 
 * @param {object} req 
 * @param {object} res 
 */
export async function getRecordsByCreator(req, res) {
    var records = await BugReport.getRecordsByCreator(req.body.BugReport.creator);

    if(records)
}


/**
 * Fetch all records, unpaged. Note: This can be potentially resource heavy if the table has a lot of records.
 * @param {object} req 
 * @param {object} res 
 */
export async function fetchAllRecords(req, res) {
    var records = await BugReport.fetchAll();
    var recordFieldArr = [];
    
    records.forEach(elem => {
        recordFieldArr.push(elem.getFields());
    });

    res.status(200).send(recordFieldArr);
}


/**
 * Fetch a set of records with the specified query offset and limit. default values are used if attributes are not provided. 
 * @param {object} req 
 * @param {object} res 
 */
export async function fetchAllRecordsPaged(req, res) {
    var records = await BugReport.fetchPaged(req.query.offset || 0, req.query.limit || 50);

    res.status(200).send(records);
}


/**
 * Delete a record by the specified ID included in the body.BugReport structure. 
 * @param {object} req 
 * @param {object} res 
 */
export async function deleteRecordById(req, res) {
    var success = await BugReport.deleteRecordById(req.body.BugReport.guid);

    if(success) res.status(200).send();

    res.status(404).send();
}


/**
 * Update a record. Expects request body to unclude BugReport json structure.
 * @param {object} req 
 * @param {object} res 
 */
export async function updateRecord(req, res) {
    var record = await BugReport.fetchRecord(req.body.BugReport.guid);
    
    if(!record) 
    {
        res.status(404).send();
    };

    if (req.body.BugReport.status) record.setStatus(req.body.BugReport.status);

}